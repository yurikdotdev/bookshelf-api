generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id    String @id @default(uuid()) @db.Uuid @map("uuid")
  name  String @db.VarChar(100)
  books Book[] @relation("WrittenBy")
}

model Book {
  id             String    @id @default(uuid()) @db.Uuid @map("uuid")
  title          String    @db.VarChar(255)
  description    String?   @db.Text
  publisher      String?   @db.VarChar(255)
  published_date DateTime?
  language       String?   @db.VarChar(100)
  cover_image    String?   @db.Text
  author_id      String    @db.Uuid
  author         Author    @relation("WrittenBy", fields: [author_id], references: [id])
  tags           BookTag[] @relation("TaggedWith")
  reviews        Review[]
  statuses       Status[]
}

model Tag {
  id       String    @id @default(uuid()) @db.Uuid @map("uuid")
  keyword  String
  books    BookTag[] @relation("Includes")
}

model BookTag {
  id      String @id @default(uuid()) @db.Uuid @map("uuid")
  book_id String @db.Uuid
  tag_id  String @db.Uuid
  book    Book   @relation("TaggedWith", fields: [book_id], references: [id])
  tag     Tag    @relation("Includes", fields: [tag_id], references: [id])
}

enum ReadingStatus {
  CURRENTLY_READING
  READ
}

model Status {
  id          String   @id @default(uuid()) @db.Uuid @map("uuid")
  book_id     String   @db.Uuid
  status      ReadingStatus
  date_added  DateTime
  is_reviewed Boolean  @default(false)
  book        Book     @relation(fields: [book_id], references: [id])
}

model Review {
  id            String   @id @default(uuid()) @db.Uuid @map("uuid")
  book_id       String   @db.Uuid
  review        String   @db.Text
  date_reviewed DateTime
  book          Book     @relation(fields: [book_id], references: [id])
}
